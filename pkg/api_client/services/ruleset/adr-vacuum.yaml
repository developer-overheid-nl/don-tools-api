extends: [[vacuum:oas, off]]

rules:
  openapi3:
    description: OpenAPI document must declare version 3.x
    severity: error
    recommended: true
    given: "$"
    then:
      field: openapi
      function: pattern
      functionOptions:
        match: '^3(\.\d+){1,2}$'

  openapi-root-exists:
    severity: error
    recommended: true
    description: Document must contain the openapi field
    given: "$"
    then:
      function: schema
      functionOptions:
        schema:
          required:
            - openapi

  missing-header:
    severity: error
    recommended: true
    description: Successful responses (2xx/3xx) must declare headers
    given: "$..responses.*"
    then:
      field: headers
      function: truthy

  missing-version-header:
    severity: error
    recommended: true
    description: Successful responses must include API-Version header
    given: "$..responses.*"
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          properties:
            headers:
              type: object
              anyOf:
                - required: [API-Version]
                - required: [Api-Version]
                - required: [Api-version]
                - required: [api-version]
                - required: [API-version]
          required: [headers]

  include-major-version-in-uri:
    severity: error
    recommended: true
    description: Server URLs must include major version in the path
    given: "$.servers[*]"
    then:
      field: url
      function: pattern
      functionOptions:
        match: "/v[0-9]+"

  paths-no-trailing-slash:
    severity: error
    recommended: true
    description: Paths must not end with a slash
    given: "$.paths"
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          propertyNames:
            not:
              pattern: ".+/$"

  info-contact:
    severity: error
    recommended: true
    description: info.contact is required
    given: "$.info"
    then:
      function: schema
      functionOptions:
        schema:
          required: [contact]

  info-contact-fields-exist:
    severity: error
    recommended: true
    description: info.contact must contain email, name and url
    given: "$.info.contact"
    then:
      function: schema
      functionOptions:
        schema:
          required: [email, name, url]

  http-methods:
    severity: error
    recommended: true
    description: Only standard HTTP methods are allowed on paths
    given: "$.paths.*"
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          propertyNames:
            pattern: "^(get|put|post|delete|patch|head|options|trace|summary|description|servers|parameters)$"

  paths-kebab-case:
    severity: warn
    description: Paths should be kebab-case
    given: "$.paths"
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          propertyNames:
            pattern: "^(\\/|(\\/_[a-z0-9]+|\\/(([a-z0-9\\-]+|{[^}]+})(\\/([a-z0-9\\-\\.]+|{[^}]+}))*)(\\/_[a-z]+)?)\\/?)$"

  schema-camel-case:
    severity: warn
    description: Schema names should be PascalCase
    given: "$.components.schemas"
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          propertyNames:
            pattern: "^[A-Z][A-Za-z0-9]*$"

  servers-use-https:
    severity: warn
    description: Servers should use HTTPS
    given: "$.servers[*]"
    then:
      field: url
      function: pattern
      functionOptions:
        match: '^https://'

  use-problem-schema:
    severity: warn
    description: Error responses should use RFC 9457 problem detail media type
    given: "$..responses"
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          patternProperties:
            "^(4|5)\\d\\d$":
              type: object
              properties:
                content:
                  type: object
                  anyOf:
                    - required: [application/problem+json]
                    - required: [application/problem+xml]

  property-casing:
    severity: warn
    description: Schema property names should be camelCase
    given: "$.components.schemas[*].properties"
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          propertyNames:
            pattern: "^[a-z][A-Za-z0-9]*$"

  semver:
    severity: error
    recommended: true
    description: info.version must be semantic version
    given: "$.info"
    then:
      field: version
      function: pattern
      functionOptions:
        match: "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
